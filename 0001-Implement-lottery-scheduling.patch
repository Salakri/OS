From e64ec635640c36cec3a9c55dcfec694fe6d36a23 Mon Sep 17 00:00:00 2001
From: Xinyun Zhao <xz2512@nyu.edu>
Date: Thu, 18 Apr 2019 23:30:40 -0400
Subject: [PATCH] Implement lottery scheduling

---
 Makefile  |  1 +
 proc.c    | 29 ++++++++++++++++++++++++++++-
 proc.h    |  1 +
 syscall.c |  2 ++
 syscall.h |  1 +
 sysproc.c | 12 ++++++++++++
 user.h    |  1 +
 usys.S    |  1 +
 8 files changed, 47 insertions(+), 1 deletion(-)

diff --git a/Makefile b/Makefile
index 5d91068..7d17a81 100644
--- a/Makefile
+++ b/Makefile
@@ -174,6 +174,7 @@ UPROGS=\
 	_wc\
 	_zombie\
 	_hackbench\
+	_lotterytest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/proc.c b/proc.c
index b122e3b..61acc18 100644
--- a/proc.c
+++ b/proc.c
@@ -48,6 +48,7 @@ allocproc(void)
   return 0;
 
 found:
+  p->tickets = 20;
   p->state = EMBRYO;
   p->pid = nextpid++;
   release(&ptable.lock);
@@ -270,7 +271,9 @@ scheduler(void)
 {
   struct proc *p;
   int foundproc = 1;
-
+  int total_tickets = 0;
+  int chosen_ticket = 0;
+  int count_current_ticket = 0;
   for(;;){
     // Enable interrupts on this processor.
     sti();
@@ -280,10 +283,33 @@ scheduler(void)
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
+
+    // Calculate total tickets
+    total_tickets = 0;
+    chosen_ticket = 0;
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    {
+      if (p->state == RUNNABLE)
+      {
+        total_tickets = total_tickets + p->tickets;
+      }
+    }
+
+    // Pick a random number as the winner
+    chosen_ticket = (int)random_at_most(total_tickets);
+
+    // Locate the winner process 
+    count_current_ticket = 0; 
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
 
+      count_current_ticket = count_current_ticket + p->tickets;
+      // Current ticket number    
+      if (count_current_ticket < chosen_ticket)
+      {
+        continue;
+      }
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
@@ -297,6 +323,7 @@ scheduler(void)
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       proc = 0;
+      break;
     }
     release(&ptable.lock);
 
diff --git a/proc.h b/proc.h
index 3b9c3ac..29f719e 100644
--- a/proc.h
+++ b/proc.h
@@ -66,6 +66,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int tickets;		       // Lottery tickets
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/syscall.c b/syscall.c
index 0e06ad4..849877c 100644
--- a/syscall.c
+++ b/syscall.c
@@ -99,6 +99,7 @@ extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_gettime(void);
+extern int sys_settickets(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -123,6 +124,7 @@ static int (*syscalls[])(void) = {
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_gettime] sys_gettime,
+[SYS_settickets] sys_settickets,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index 6d6c224..e59bc4a 100644
--- a/syscall.h
+++ b/syscall.h
@@ -21,3 +21,4 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_gettime 22
+#define SYS_settickets 23
diff --git a/sysproc.c b/sysproc.c
index ddaed7c..3d5b13c 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -98,3 +98,15 @@ sys_gettime(void) {
   cmostime(d);
   return 0;
 }
+
+int
+sys_settickets(void)
+{
+  int n;
+  if (argint(0, &n) < 0)
+  {
+    return -1;
+  }
+  proc->tickets = n;
+  return n;
+}
diff --git a/user.h b/user.h
index 46d1059..58e344c 100644
--- a/user.h
+++ b/user.h
@@ -24,6 +24,7 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 int gettime(struct rtcdate *);
+int settickets(int);
 
 // ulib.c
 int stat(char*, struct stat*);
diff --git a/usys.S b/usys.S
index e556d66..27646a9 100644
--- a/usys.S
+++ b/usys.S
@@ -30,3 +30,4 @@ SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
 SYSCALL(gettime)
+SYSCALL(settickets)
-- 
1.9.1

